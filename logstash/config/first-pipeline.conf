input {
    beats {
        port => 5044    
   }
 ## redis {
  # host => "redis"
  #  key => "logstash"
#	data_type => "list"
#   }
  
}

filter {
 #  date {
#      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
#   }
#   geoip {
#      source => "clientip"
#   }
#if [system][filesystem][device_name] == "/dev/xvda1" {
#mutate {
 
#   convert => { "[system][filesystem][free]" => "integer" }
 
#  rename => { "[system][filesystem][free]" => "[system][filesystem][value]" }
#  add_field => { "[system][filesystem][fstype]" => "Free Hard Disk" }
#  convert => { "[system][filesystem][value]" => "integer" }
  
#}
# clone {
#  clones => ["fsavailaible"] 
#   add_field => { "[@metadata][beat]" => "metricbeat" }
#   add_field => { "[@metadata][type]" => "metricsets" }
#   remove_field => [ "[system][filesystem][value]" ]
#   remove_field => [ "[system][filesystem][fstype]" ]


# }
#  if [type] == "fsavailaible"  {
#   mutate {
#   add_field => { "[system][filesystem][fstype]" => "Used Hard Disk" }
#   convert => { "[system][filesystem][used][bytes]" => "integer" }
#  rename => { "[system][filesystem][used][bytes]" => "[system][filesystem][value]" }
#   convert => { "[system][filesystem][value]" => "integer" }
# }
#}
#}
if [type] == "syslog" {
#grok {
#match => [ "message" , "%{MONTH} %{MONTHDAY} %{TIME} ip-10-123-0-58 sshd\[\d*]: error: PAM: Authentication %{WORD:status} for illegal user %{USER:user} from %{IP:iplogin}"]
#overwrite => [ "message" ]
#}
grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }

#if [status] == "failure" {

 #     metrics {
 #      meter => [ "login-%{iplogin}" ]
 #     flush_interval => 30
 #     clear_interval => 30
 #     add_tag => "loginerror"
 #    }
  #  mutate {
  #    add_tag => "failure-login"
  #    add_field => {"[@metadata][iphost]" => "%{iplogin}"}
   # }
}

  }


grok {
match => [ "message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}"]
overwrite => [ "message" ]
add_field => { "nginxlog" => "nginx" }
}
#if [response] == "404" {
# throttle {
##    before_count => -1
 #   after_count => 4
 #   key => "%{message}"
 #   period => 60
 #   max_age => 120
 #   add_tag => [ "throttled" ]
 # }
#}
#if [count404][count] > 4 { 
#mutate {
#  add_tag => "hello"
#}

#}
   
if [response] == "404" { 
      metrics {
      meter => [ "count404" ]
      flush_interval => 30
      clear_interval => 30
      add_tag => "metric"
    }
 }
    
mutate {
convert => ["response", "integer"]
convert => ["bytes", "integer"]
convert => ["responsetime", "float"]
convert => [ "[geoip][coordinates]", "float"]

}
 
geoip {
source => "clientip"
target => "geoip"
add_tag => [ "nginx-geoip" ]
add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
}
 
date {
match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
remove_field => [ "timestamp" ]
} 
useragent {
source => "agent"
}	

#if [type] == "nginx-error" {
#grok {
#match => [ "message" , "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<client>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request})?(?:, upstream: \"%{URI:upstream}\")?(?:, host: %{QS:host})?(?:, referrer: \"%{URI:referrer}\")"]
#overwrite => [ "message" ]
#}
 
#geoip {
#source => "client"
#target => "geoip"
#add_tag => [ "nginx-geoip" ]
#}
 
#date {
#match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss" ]
#add_field => { "received_at" => "%{YYYY/MM/dd}"}
#remove_field => [ "timestamp" ]
#match => [ "timestamp" , "${TIMESTAMP_ISO8601}" ]
#add_field => { "received_at" => "%{YYYY/MM/dd}"}
#remove_field => [ "timestamp" ]
#}
#}


}



output {
 

  if [type] != "collectd" { 
   elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}"
 }
}

if [system][filesystem][device_name] == "/dev/xvda1" {
stdout {
 codec => rubydebug { metadata => true }
 
 }
}

}